Exercice 1 : Pyramide de symboles
A partir d'une variable 'symbole' et une variable 'taille', créez une pyramide avec ce symbole, de la hauteur du nombre contenu dans la variable 'taille'.

Dans cet exemple-ci, nous allons donc afficher une pyramide de dollars ($) de hauteur 10.

Votre script devra donc afficher :

         $ 
        $ $ 
       $ $ $ 
      $ $ $ $ 
     $ $ $ $ $ 
    $ $ $ $ $ $ 
   $ $ $ $ $ $ $ 
  $ $ $ $ $ $ $ $ 
 $ $ $ $ $ $ $ $ $ 
$ $ $ $ $ $ $ $ $ $

Exercice 2 : Cumul des Valeurs d'une Liste

Vous devez créer une fonction `cumul_valeurs(liste)` qui prend une liste de nombres en paramètre et retourne une nouvelle liste. Chaque élément de cette nouvelle liste est la somme de tous les éléments précédents de la liste originale (y compris l'élément actuel).

1. Si la liste en entrée est vide, retournez une liste vide.
2. Si la liste contient des éléments, chaque élément de la liste de sortie doit être la somme cumulative des éléments de la liste d'entrée jusqu'à cet index.
3. Vous ne devez pas modifier la liste originale.

Exemple :

- Entrée : `[1, 2, 3, 4]`
- Sortie : `[1, 3, 6, 10]`

Exercice 3 : devinettes mathématiques

Dans cet exercice, vous allez créer un jeu de devinettes mathématiques où l'utilisateur doit résoudre une série d'opérations arithmétiques. Voici les étapes à suivre :

1. Importation du module random : Commencez par importer le module random, qui sera utilisé pour générer des nombres aléatoires.

2. Définition de la fonction question : Définissez une fonction nommée question. Cette fonction doit :
   - Choisir aléatoirement deux nombres entiers entre 1 et 100.
   - Sélectionner aléatoirement une opération parmi l'addition (+), la soustraction (-), la multiplication (*) et la division (/).
   - Calculer le résultat de l'opération.
   - Demander à l'utilisateur de deviner le résultat de l'opération.
   - Renvoyer True si la réponse de l'utilisateur est correcte, sinon False.

3. Initialisation du score et du nombre de questions : 
Initialisez deux variables : score à 0 pour suivre le nombre de réponses correctes et nb_questions pour définir le nombre de questions à poser à l'utilisateur.

4. Boucle de jeu : Utilisez une boucle for pour poser un nombre prédéfini de questions à l'utilisateur. 
À chaque itération, appelez la fonction question et mettez à jour le score en conséquence.

5. Affichage du score final : Après avoir terminé toutes les questions, affichez le score final de l'utilisateur.

Exercice 4 : Statistiques des Salaires et Primes

Vous travaillez dans une entreprise où chaque salarié reçoit un salaire mensuel et une prime. Votre tâche est d'analyser les données des salaires et des primes pour trouver :

1. Les salariés qui ont un salaire d'au moins 3000 euros par mois.
2. Les salariés qui ont reçu une prime d'au moins 250 euros ce mois-ci.
3. Les salariés dont la prime représente au moins 6% de leur salaire.

Définissez la fonction statistiques_salaires(personnes, salaires, primes).

Données en Entrée

- `personnes` : Liste des noms des salariés.
- `salaires` : Liste des salaires mensuels des salariés (en euros).
- `primes` : Liste des primes mensuelles des salariés (en euros).

Sorties Attendues

- Liste des salariés avec un salaire d'au moins 3000 euros.
- Liste des salariés avec une prime d'au moins 250 euros.
- Liste des salariés dont la prime est au moins 6% de leur salaire.

Testez sur :

# Liste des noms des salariés
personnes = ["Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "George"]

# Correspondant à chaque salarié, leur salaire mensuel
salaires = [3200, 2900, 3050, 2700, 4200, 2500, 3800]

# Correspondant à chaque salarié, leur prime mensuelle
primes = [200, 300, 180, 350, 400, 260, 500]


