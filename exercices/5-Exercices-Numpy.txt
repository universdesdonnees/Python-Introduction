https://www.w3schools.com/python/numpy/default.asp

#### Exercice 0 : S'√©chauffer
Cr√©ez un tableau NumPy de valeurs de 0 √† 2œÄ divis√© en 100 parties.
Calculez le sinus et le cosinus de ces valeurs.
Utilisez np.round() pour arrondir les r√©sultats √† 2 d√©cimales.

### Exercice 1 : Le Jeu du Bingo
Cr√©ez un programme qui g√©n√®re une carte de bingo 5x5 o√π chaque cellule contient un nombre al√©atoire unique entre 1 et 75. 
Ensuite, simulez le tirage de num√©ros al√©atoires entre 1 et 75 et marquez les num√©ros sur votre carte de bingo. 
Le but est de voir combien de tirages sont n√©cessaires pour compl√©ter une ligne ou une colonne.

### Exercice 2 : Le Puzzle des Pixels
Imaginez un tableau NumPy 10x10 rempli de z√©ros. 
√âcrivez un programme qui change la couleur (valeur) de pixels al√©atoires pour cr√©er un motif ou une image.
Vous pouvez par exemple essayer de cr√©er un motif en damier.

### Exercice 3 : Le Labyrinthe

Objectif : Cr√©er un jeu de labyrinthe o√π le joueur doit naviguer √† travers pour atteindre une sortie.

Description :
1. G√©n√©ration du Labyrinthe : √âcrivez une fonction generer_labyrinthe(taille) qui cr√©e un labyrinthe de taille n x n. 
Chaque cellule du labyrinthe est accessible ou non, d√©termin√© de mani√®re al√©atoire.

import numpy as np
import random

def generer_labyrinthe(taille):
    labyrinthe = np.random.choice([0, 1], size=(taille, taille), p=[0.7, 0.3])
    labyrinthe[0, 0] = 0  # Point de d√©part
    labyrinthe[taille-1, taille-1] = 0  # Sortie
    return labyrinthe

generer_labyrinthe(10)

2. Affichage du Labyrinthe : Cr√©ez une fonction afficher_labyrinthe(labyrinthe) qui affiche le labyrinthe sur la console. Utilisez diff√©rents caract√®res pour les murs, les chemins libres, la position du joueur, et la sortie.

3. Mouvement du Joueur : Impl√©mentez une fonction deplacer_joueur(labyrinthe, position, mouvement) qui d√©place le joueur dans le labyrinthe. Le joueur ne peut pas traverser les murs et ne peut se d√©placer que dans les limites du labyrinthe.

4. Trouver la Sortie : Le joueur doit naviguer √† travers le labyrinthe pour trouver la sortie. √âcrivez une fonction trouver_sortie(labyrinthe, position_joueur) qui d√©termine si le joueur a atteint la sortie.

5. Jeu Principal : Cr√©ez une fonction jouer() qui utilise toutes les fonctions ci-dessus pour cr√©er une exp√©rience de jeu interactive. Le joueur peut entrer des commandes pour se d√©placer dans le labyrinthe.

D√©fis suppl√©mentaires :
- Ajoutez un syst√®me de score bas√© sur le nombre de mouvements effectu√©s.
- Int√©grez des pi√®ges ou des bonus dans le labyrinthe.
- Cr√©ez des niveaux de difficult√© vari√©s, o√π la taille du labyrinthe et la complexit√© augmentent.

### Exercice 4 : Simulation de Population
Cr√©ez un tableau NumPy pour repr√©senter un espace 2D o√π chaque cellule peut √™tre vide ou contenir une cr√©ature. 

Les cr√©atures peuvent se d√©placer, se reproduire ou mourir en fonction de r√®gles simples que vous d√©finissez.

Par exemple, imaginons que chaque creature tire une lettre:
- "d" elle se d√©place dans une case random et disponible (sans autre cr√©ature).
- "r" elle se reproduit et sa valeur augmente de "+1"
- "m" elle meurt sur le champs

### Exercice 5 : Analyse de Donn√©es de Ventes
Imaginez que vous avez des donn√©es de ventes pour diff√©rents produits. 
Les donn√©es sont repr√©sent√©es dans un tableau NumPy o√π chaque ligne est un produit et chaque colonne une semaine de vente. 
Calculez des statistiques comme les ventes moyennes, le produit le plus vendu, la semaine avec les ventes maximales, etc.

### Exercice 6 : Le Morpion




### Exercice 7 : Le Train ou l'heure de la collision
Vous allez cr√©er un programme en Python pour pr√©dire l'heure √† laquelle un train, partant de la gare Montparnasse √† 9h, atteindra Toulouse, o√π vous √™tes fictivement attach√© sur les rails. La distance entre la gare Montparnasse et Toulouse est de 674 km.

1. Initialisation des Param√®tres :
   - D√©finissez la distance entre Montparnasse et Toulouse (674 km).
   - D√©finissez l'heure de d√©part du train (9h).

2. Calcul des Heures d'Arriv√©e :
   - Pour chaque vitesse de 100 km/h √† 300 km/h, par paliers de 20 km/h, calculez l'heure d'arriv√©e √† Toulouse.
   - Utilisez la formule `temps = distance / vitesse` pour calculer le temps de trajet en heures.

3. Affichage du Tableau:
   - Affichez un tableau indiquant la vitesse du train et l'heure correspondante d'arriv√©e √† Toulouse.
   - Arrondissez les heures d'arriv√©e √† la minute inf√©rieure.

4. Gestion des Formats d'Heure :
   - Assurez-vous que les heures d'arriv√©e sont affich√©es au format horaire standard (HH:MM).

### BONUS
- Am√©liorez la lisibilit√© du tableau avec une mise en forme soign√©e.
- Ajoutez la prise en compte des √©ventuels arr√™ts ou retards.


### Exercice 8 : Puissance 4

Dans cet exercice, vous allez cr√©er une version du jeu classique Puissance 4 en Python. Voici les √©tapes √† suivre :

1. Initialisation de la Grille
- Cr√©ez une fonction initiation_grille() qui g√©n√®re une grille de jeu de dimensions 7x6 (7 lignes et 6 colonnes). La grille doit √™tre initialis√©e avec des z√©ros, repr√©sentant des emplacements vides.

2. Jouer un Coup
- √âcrivez une fonction jouer_coup(grille, colonne, joueur) qui permet √† un joueur de placer un jeton dans une colonne donn√©e.
- La fonction doit v√©rifier si la colonne choisie est valide (entre 0 et 5) et si elle n'est pas d√©j√† pleine.
- Le jeton doit √™tre plac√© au niveau le plus bas disponible dans la colonne s√©lectionn√©e.
- La grille est mise √† jour avec le coup du joueur.

3. V√©rification de la Victoire
- Impl√©mentez une fonction verifier_gagnant(grille) qui v√©rifie si un joueur a align√© quatre de ses jetons horizontalement, verticalement ou diagonalement.
- La fonction doit retourner le num√©ro du joueur gagnant ou 0 si aucun joueur n'a encore gagn√©.

4. Affichage de la Grille
- Cr√©ez une fonction afficher_grille(grille) pour afficher l'√©tat actuel de la grille.
- Utilisez des emojis ou des symboles pour repr√©senter les jetons des joueurs : üî¥ pour le joueur 1, üü° pour le joueur 2, et ‚ö™ pour un emplacement vide.

5. Boucle de Jeu Principale
- Mettez en place une fonction puissance4() qui contr√¥le le d√©roulement du jeu.
- Alternez entre les joueurs apr√®s chaque coup valide.
- Continuez le jeu jusqu'√† ce qu'un joueur gagne ou que la grille soit compl√®tement remplie.

### BONUS
- Optimisez votre code : ajoutez des noms personnalis√©s pour les joueurs, g√©rez les exceptions et les entr√©es invalides.
- Am√©liorez l'exp√©rience utilisateur avec une interface utilisateur conviviale.
